#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/uart.h"
#include "freertos/queue.h"
#include <driver/ledc.h>
#include "freertos/queue.h"
#include <stdio.h>
#include <string.h>


#define HIGH            1
#define LOW             0

#define UART_NUM        UART_NUM_2
#define BUF_SIZE        1024
#define TASK_MEMORY     1024 
#define ONBOARD_LED       2
#define MAX_DUTY        4000

QueueHandle_t LEDQueue;


static void uart_init()
{
    uart_config_t uart_config = {
    .baud_rate = 9600,
    .data_bits = UART_DATA_8_BITS,
    .parity    = UART_PARITY_DISABLE,
    .stop_bits = UART_STOP_BITS_1,
    .flow_ctrl = UART_HW_FLOWCTRL_DISABLE,
    .source_clk = UART_SCLK_APB,
    };


    // Installing UART driver, setting pins and configuration
    uart_param_config(UART_NUM, &uart_config);
    uart_set_pin(UART_NUM, 5, 4, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
    uart_driver_install(UART_NUM, BUF_SIZE, BUF_SIZE, 0, NULL, 0);

}


void pwm_setup(void){
/*
Set LEDC Timer:
                5000hz
                AUTO_CLK
                TIMER_1
                LOW_SPEED
                13 BIT
*/
ledc_timer_config_t timerConfig;
timerConfig.duty_resolution = LEDC_TIMER_13_BIT; 
timerConfig.timer_num = LEDC_TIMER_1;
timerConfig.freq_hz = 5000; 
timerConfig.speed_mode = LEDC_LOW_SPEED_MODE;
timerConfig.clk_cfg = LEDC_AUTO_CLK;
ledc_timer_config(&timerConfig);

/*
Set LEDC Channel:
                GPIO_21
                LOW_SPEED
                TIMER_1
                INTERRUPT_DISABLE
                0 duty
                Max duty 
*/
ledc_channel_config_t channelConfig;
channelConfig.gpio_num = ONBOARD_LED;    
channelConfig.speed_mode = LEDC_LOW_SPEED_MODE;
channelConfig.channel = LEDC_CHANNEL_1;
channelConfig.intr_type = LEDC_INTR_DISABLE;
channelConfig.timer_sel = LEDC_TIMER_1;
channelConfig.duty = 0;
channelConfig.hpoint = MAX_DUTY;   
ledc_channel_config(&channelConfig);
}

void PWM_task(void *pvParameters)
{

    int storeData;
    while(1)
    {
        if(xQueueReceive(LEDQueue, &storeData, (TickType_t)100) == pdPASS){
            /* set duty cycle */
            ledc_set_duty(LEDC_LOW_SPEED_MODE, LEDC_CHANNEL_1,storeData);
            vTaskDelay(10/portTICK_PERIOD_MS); /* 10ms */ 
            /* update duty cycle */
            ledc_update_duty(LEDC_LOW_SPEED_MODE,LEDC_CHANNEL_1);
        }
    }
}

static void uart_task(void *arg)
{

    uint8_t *data = (uint8_t *) malloc(BUF_SIZE); // Temporary buffer to read by Polling 


    while(1){

    bzero(data,BUF_SIZE);

    int val; // value sent through LEDQueue to update PWM 
    char* send1_str; // extra credit string to be sent through UART to putty to print state of LED
    int len = uart_read_bytes(UART_NUM, data, BUF_SIZE, pdMS_TO_TICKS(100)); // 

        for(size_t i = 0; i < len; i++) // Polling method using For Loop
        {
            char value = data[i]; // character variable to iterate buffer and read *data

            switch (value)
            {
            case 'q':
                 val = 4000; // PWM change
                 send1_str = "LED Level: HIGH ";
                 vTaskDelay(10/portTICK_PERIOD_MS); /* 10ms */
                 xQueueSendToBack(LEDQueue, &val, 0);
                uart_write_bytes(UART_NUM, (char*)send1_str, strlen(send1_str)); // UART sending LED state 
                break;
            
            case 'w':
                val = 2000; // PWM change
                send1_str = "LED level: MEDIUM ";
                vTaskDelay(10/portTICK_PERIOD_MS); /* 10ms */ 
                uart_write_bytes(UART_NUM, (char*)send1_str, strlen(send1_str)); // UART sending LED state 
                xQueueSendToBack(LEDQueue, &val, 0);


                break;

            case 'e':
                val = 500; // PWM change
                send1_str = "LED level: LOW ";
                vTaskDelay(10/portTICK_PERIOD_MS); /* 10ms */ 
                uart_write_bytes(UART_NUM, (char*)send1_str, strlen(send1_str)); // UART sending LED state 
                xQueueSendToBack(LEDQueue, &val, 0);


                break;
            
            case 'r':
                val = 0; // PWM change
                send1_str = "LED OFF! ";
                vTaskDelay(10/portTICK_PERIOD_MS); /* 10ms */ 
                uart_write_bytes(UART_NUM, (char*)send1_str, strlen(send1_str)); // UART sending LED state 
                xQueueSendToBack(LEDQueue, &val, 0);


                break;
            
            default:

            val = 0;

                break;
            
            }

        }
    }
}


void app_main(void)
{

    uart_init();
    pwm_setup();

    LEDQueue = xQueueCreate(5, sizeof(int));

    xTaskCreate(uart_task, "uart_task", TASK_MEMORY, NULL, 5, NULL);
    xTaskCreate(PWM_task, "PWM_task", 2048, NULL, 5, NULL);
}


